-- Create tables
CREATE TABLE DEPARTMENT (
    DNo INT PRIMARY KEY,
    DName VARCHAR(50),
    MgrSSN INT,
    MgrStartDate DATE
);
CREATE TABLE EMPLOYEE (
    SSN INT PRIMARY KEY,
    Name VARCHAR(50),
    Address VARCHAR(100),
    Sex CHAR(1),
    Salary INT,
    SuperSSN INT,
    DNo INT,
    FOREIGN KEY (SuperSSN) REFERENCES EMPLOYEE(SSN),
    FOREIGN KEY (DNo) REFERENCES DEPARTMENT(DNo)
);


CREATE TABLE DLOCATION (
    DNo INT,
    DLoc VARCHAR(100),
    PRIMARY KEY (DNo, DLoc),
    FOREIGN KEY (DNo) REFERENCES DEPARTMENT(DNo)
);

CREATE TABLE PROJECT (
    PNo INT PRIMARY KEY,
    PName VARCHAR(50),
    PLocation VARCHAR(100),
    DNo INT,
    FOREIGN KEY (DNo) REFERENCES DEPARTMENT(DNo)
);

CREATE TABLE WORKS_ON (
    SSN INT,
    PNo INT,
    Hours INT,
    PRIMARY KEY (SSN, PNo),
    FOREIGN KEY (SSN) REFERENCES EMPLOYEE(SSN),
    FOREIGN KEY (PNo) REFERENCES PROJECT(PNo)
);

-- Insert data into DEPARTMENT table
INSERT INTO DEPARTMENT (DNo, DName, MgrSSN, MgrStartDate)
VALUES
    (1, 'HR', 101, '2023-01-15'),
    (2, 'Finance', 103, '2023-02-20'),
    (3, 'Engineering', 104, '2023-03-10'),
    (4, 'Marketing', 105, '2023-04-05');
    
-- Insert data into EMPLOYEE table
INSERT INTO EMPLOYEE (SSN, Name, Address, Sex, Salary, SuperSSN, DNo)
VALUES
    (101, 'John Doe', '123 Main St', 'M', 60000, NULL, 1),
    (102, 'Jane Smith', '456 Elm St', 'F', 55000, 101, 1),
    (103, 'Mike Johnson', '789 Oak St', 'M', 65000, 101, 2),
    (104, 'Lisa Brown', '101 Pine St', 'F', 58000, 102, 3),
    (105, 'David Lee', '234 Birch St', 'M', 62000, 102, 4);

-- Insert data into DLOCATION table
INSERT INTO DLOCATION (DNo, DLoc)
VALUES
    (1, 'New York'),
    (2, 'Los Angeles'),
    (3, 'Chicago'),
    (4, 'Houston');

-- Insert data into PROJECT table
INSERT INTO PROJECT (PNo, PName, PLocation, DNo)
VALUES
    (201, 'Project A', 'New York', 1),
    (202, 'Project B', 'Los Angeles', 2),
    (203, 'Project C', 'Chicago', 3),
    (204, 'Project D', 'Houston', 4);

-- Insert data into WORKS_ON table
INSERT INTO WORKS_ON (SSN, PNo, Hours)
VALUES
    (101, 201, 40),
    (102, 202, 35),
    (103, 202, 30),
    (104, 203, 45),
    (105, 204, 42);

-- Alterations
-- Add a new field "Email" to the EMPLOYEE table
ALTER TABLE EMPLOYEE
ADD Email VARCHAR(100);

-- Drop the "Sex" field from the EMPLOYEE table
ALTER TABLE EMPLOYEE
DROP COLUMN Sex;

-- Adding and Dropping Constraints
-- Add a unique constraint to the "Email" field in the EMPLOYEE table
ALTER TABLE EMPLOYEE
ADD CONSTRAINT unique_email UNIQUE (Email);

-- Drop the unique constraint on the "Email" field in the EMPLOYEE table
ALTER TABLE EMPLOYEE
DROP CONSTRAINT unique_email;

-- Add a check constraint to the "Salary" field in the EMPLOYEE table
ALTER TABLE EMPLOYEE
ADD CONSTRAINT check_salary CHECK (Salary >= 30000);

-- Drop the check constraint on the "Salary" field in the EMPLOYEE table
ALTER TABLE EMPLOYEE
DROP CONSTRAINT check_salary;

-- Display data from the tables
SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;
SELECT * FROM DLOCATION;
SELECT * FROM PROJECT;
SELECT * FROM WORKS_ON;



-- Example 1: Simple SELECT
-- Retrieve all employees' names and addresses
SELECT Name, Address
FROM EMPLOYEE;
-- Example 2: SELECT with WHERE and ORDER BY
-- Retrieve employees earning more than $60,000, ordered by salary in descending order
SELECT *
FROM EMPLOYEE
WHERE Salary > 60000
ORDER BY Salary DESC;
-- Example 3: SELECT with JOIN and GROUP BY
-- Retrieve department names and the total number of employees in each department
SELECT D.DName, COUNT(E.SSN) AS EmployeeCount
FROM DEPARTMENT D
JOIN EMPLOYEE E ON D.DNo = E.DNo
GROUP BY D.DName;
-- Example 4: Nested Query with NOT EXISTS
-- Retrieve projects without assigned employees
SELECT PName
FROM PROJECT P
WHERE NOT EXISTS (SELECT 1 FROM WORKS_ON W WHERE W.PNo = P.PNo);
-- Example 5: UPDATE Statement
-- Update the location of Project A
UPDATE PROJECT
SET PLocation = 'Boston'
WHERE PName = 'Project A';
-- Example 6: DELETE Statement
-- Delete employees with salaries less than $40,000
DELETE FROM EMPLOYEE
WHERE Salary < 40000;
-- Example 7: Set Operations (UNION)
-- Retrieve a list of unique locations across departments and projects
SELECT DLoc FROM DLOCATION
UNION
SELECT PLocation FROM PROJECT;
-- Example 8: EXISTS and JOIN
-- Retrieve employees who are also managers
SELECT E.Name
FROM EMPLOYEE E
WHERE EXISTS (SELECT 1 FROM DEPARTMENT D WHERE D.MgrSSN = E.SSN);
-- Example 9: SELECT with LIKE
-- Retrieve employees with addresses containing 'St'
SELECT Name, Address
FROM EMPLOYEE
WHERE Address LIKE '%St%';
-- Example 10: GROUP BY HAVING
-- Retrieve departments with more than 2 employees
SELECT D.DName, COUNT(E.SSN) AS EmployeeCount
FROM DEPARTMENT D
JOIN EMPLOYEE E ON D.DNo = E.DNo
GROUP BY D.DName
HAVING COUNT(E.SSN) > 2;
-- Example 11: SELECT with BETWEEN
-- Retrieve employees with salaries between $50,000 and $60,000
SELECT *
FROM EMPLOYEE
WHERE Salary BETWEEN 50000 AND 60000;
-- Example 12: UPDATE with JOIN
-- Update the MgrStartDate for the HR department manager
UPDATE DEPARTMENT D
SET MgrStartDate = '2023-01-20'
WHERE D.DName = 'HR';


-- Exam Questions
-- 1)Make a list of all project numbers for projects that involve an employee whose last name is ‘Scott’, either as a worker or as a manager of the department that controls the project. 
select p_no,p_name,name from Project p, Employee e 
where p.d_no=e.d_no and e.name like "%Scott";

-- 2)Show the resulting salaries if every employee working on the ‘IoT’ project is given a 10 percent raise
select e.name,e.salary as old, 1.1*e.salary as new
from Employee e,Project p,WorksOn w
where e.ssn=w.ssn and p.p_no=w.p_no
and p.p_name like "%IOT%";

-- 3)Find the sum of the salaries of all employees of the ‘Accounts’ department, as well as the maximum salary, the minimum salary, and the average salary in this department
select sum(e.salary),max(e.salary),min(e.salary)
from Employee e
join Department d on d.d_no=e.d_no
where d.dname like "%Accounts%";

-- 4)Retrieve the name of each employee who works on all the projects controlled by department number 5 (use NOT EXISTS operator).
select e.ssn,e.name,e.d_no
from Employee e
where not EXISTS(select p.p_no from Project p where p.d_no=1 and p.p_no 
not in (select w.p_no from WorksOn w where w.ssn=e.ssn));

-- 5)For each department that has more than five employees, retrieve the department number and the number of its employees who are making more than Rs. 6,00,000
select d.d_no,count(*)
from Department d, Employee e
where d.d_no=e.d_no and e.salary>600000
group by d.d_no
having count(*)>1;

-- 6)Create a view that shows name, dept name and location of all employees.
create view emp_details as
select name,dname,d_loc from Employee e 
join Department d on e.d_no=d.d_no 
join DLocation dl on d.d_no=dl.d_no;
select * from emp_details;

-- 7)Create a trigger that prevents a project from being deleted if it is currently being worked by any employee
delimiter //
create trigger xyz
before delete on Project
for each row
  IF exists(select * from WorksOn where p_no=old.p_no)then
    signal sqlstate '45000' set message_text='Employee working on project';
  end if;
begin
end;
//
delimiter ;
